{"name":"Axolotlkit","tagline":"AxolotlKit is an implementation of the Axolotl encryption protocol, written in Objective-C.","body":"# AxolotlKit [![Build Status](https://travis-ci.org/WhisperSystems/AxolotlKit.svg?branch=master)](https://travis-ci.org/WhisperSystems/AxolotlKit)\r\n\r\nAxolotlKit is a free (as in Freedom) implementation of the Axolotl protocol, written in Objective-C.\r\n\r\n![AxolotlKit](http://cl.ly/WYR4/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f373635392f323131353834382f36303637346365322d393035632d313165332d396233622d6634663830613766363533342e706e67.png)\r\n\r\n### Status\r\n\r\nAxolotl is currently being reviewed. All scrutiny welcome. Once ready, it will be distributed via CocoaPods. \r\n\r\n## Goal\r\n\r\nAxolotlKit was designed to be a drop-in library that can be easily integrated into existing projects. \r\n\r\nAxolotl is an [asynchronous cryptographic ratcheting protocol](https://github.com/trevp/axolotl/wiki) [with interesting properties](https://github.com/WhisperSystems/TextSecure/wiki/ProtocolV2).\r\n\r\n## Integration\r\n\r\nAxolotlKit was designed with enough abstraction to integrate it easily into your own project. Please refer to the documentation or the TextSecure example to properly implement the required Objective-C storage protocols. \r\n\r\nUnlike OTR, Axolotl is designed for long-lived sessions, keys need to be stored. AxolotlKit defines interfaces of the storage classes (`IdentityKeyStore.h`, `PreKeyStore.h`, `SessionStore.h` and `SignedPreKeyStore.h`). AxolotlKit objects do comply to `NSSecureCoding` so serialization of objects for the database is provided for you.\r\n\r\n### Prekeys\r\n\r\nA concept of *PreKeys* are used to achieve asynchronous perfect forward secrecy. PreKeys are composed of a Curve25519 public key and a unique ID, both stored by the server.\r\n\r\nAt install time, clients generate a single signed PreKey as well as a large list of unsigned PreKeys and transmit those to the server. \r\n\r\n\r\n### Sessions\r\n\r\nThe Axolotl protocol is session-oriented.  Clients establish a \"session,\" which is then used for all subsequent encrypt/decrypt operations.  There is no need to ever tear down a session once one has been established.\r\n\r\nSessions are established in one of these ways:\r\n\r\n- PreKeyBundles. A client that wishes to send a message to a recipient can establish a session by retrieving a PreKeyBundle for that recipient from the server.\r\n\r\n- PreKeyWhisperMessages. A client can receive a PreKeyWhisperMessage from a recipient and use it to establish a session.\r\n\r\n### State\r\n\r\nAn established session encapsulates a lot of state between two clients.  That state is maintained in durable records which need to be kept for the life of the session.\r\n\r\nState is kept in the following places:\r\n\r\n- Identity State.  Clients will need to maintain the state of their own identity key pair, as well as identity public keys received from other clients.\r\n\r\n- PreKey State. Clients will need to maintain the state of their generated (private) PreKeys.\r\n\r\n- Signed PreKey States. Clients will need to maintain the state of the their signed (private) PreKeys.\r\n\r\n- Session State.  Clients will need to maintain the state of the sessions they have established.\r\n\r\n## FAQ\r\n\r\n### Q: Will you release a Swift implementation of AxolotlKit too?\r\nA: If Swift ends up being a good language for cryptographic applications, that will be considered. Itâ€™s still too early to make that call now. \r\n\r\n## Credit\r\n\r\nThanks to Trevor Perrin and Moxie Marlinspike for the amazing work on the Axolotl protocol and original implementation. Thanks to [Conor Heelan](http://www.conorheelan.com/) for the Axolotl illustration.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}